/*@bugs
*done, now if cursor is above it just places line 1* clicking above line 1 crashes

undoing after placing the mouse highlights and deletes text?

after using the text editor for some time (wrote like 150 lines)
    undo and redo were inserting the characters in incorrect places (although it seemed to be the correct characters)

text selection wasnt deleted when using the delete key

text selection isnt deleted when using undo/redo

cant select just a single character

sometimes cursor is unresponsive after opening app

sometimes enter will skip the first keypress

text selection stops working when mouse goes outside of window, doesnt get left key up event? maybe just do mouseup event when cursor leaves window

if you select a line from the 0th character and go upwards with the selection it highlights that space when it shouldnt?
*/

/*
ode opens with the terminal, editors can be launched from the terminal

ode marks files as dirty as they are edited, recompiling objects at some time and relinking the dirty objects
automatically links the dependencies, none of that needs to be specified, can launch program with a macro hotkey
*/

/*

interpreter/shell builtin functions: (or can be part of language and use language as build scripts see code example below
    compile(module path,output path, server modules to link[]=NULL);
    
server modules are modules that will be used remotely, TOTALLY OPAQUE
couldnt tell its a server in the code except that calls tend to be wrapped in async
typechecked together at compile time but server is output as separate program
when ctoring server module connect_tcp is called
dtor close_tcp is called

//could do import does modules and using does rvalues, both fall off at end of scope

(){
    OTL.import(OTL);
    import(lib);
    //or "import(OTL.lib);"
    //lib.compile(,,,);
}//shell could look like this with top and bottom line uneditable and the inside expanding as you type valid statements, then can save the module

could also import objects e.g.
var x:Entity=new Player();
{//import falls off at end of scope (could be using)
    import x;
    relpos=[0,0];   
}

}
{
 
javascript sg style and c style object initialization is solved with inline method 
declaration/call syntax
new Entity()->{
    size=[2,2];
    pos=[5,5];
    let x=2;
    relpos=(x+1,5);
};
is an operator usable on any object, not just for construction

   OR
   
change "import" to "using"
allow "using" on any typename to accomplish the same thing as above
maybe it can be wrapped in a block also idk   
}
*/
/*
    instantiating remote objects, should it be opaque in the language?

    automatic documentation generation - what exists? doxygen looks good. but wont work with OTL
        can create a separate program (or "header mode" in OTE) for basically just viewing header files, everything is a clickable link
        can generate javascript from that to create online documentation
        debugger, doc generator, interpreter/binding generator/compiler, editor, QML type language that compiles to OTL

    (x || 100)

    ? in new language if x is zero should evaluate to 100 not 1. (javascript style)
*/

/*
@notes

doing some optimizations e.g. changing the text storing data structure before writing future code (e.g. remote editing) might save time (unless it can all be done through some shared code)

move all editor-stateful variables from main to editor

designed to only have one font rendering in an editor
*/

/*@todo

keep using valgrind

make cursor x last highest index

shift tab to untab (make tab and untab work with text selection)

sort out cursor positioning on undo/redo, especially for deleting selections
    make default to put cursor at end of insertion?
    
auto indent and braces completion, insert second newline and indent after enter on brace ({[]})

shift makes you highlight whenever you move the cursor in any way (shift down should assign to focused_editor->current_text_selection)

other ctrl shortcut - undo,redo - search and replace should (optionally?) be able to work on all windows
undo redo, whenever you insert text into the document push the action into some array and set index to top of array, when undo do
opposite action of array[index] and decrement index, when pressing redo do action at array[index] and increment index

ui and files (js port?) - if the ui is changed need to check the mouse position and change the system_cursor (hittest)

ctrl arrows, ctrl shift arrows for selection (shared code with mouse selection and parsing, it goes to tokens)
syntax highlighting & auto completion

tbr - if line numbers render at greater than margin size clip them

optimize paste and line insertion/removal (im sure rendering is the bottleneck)

update root entity on window resize for each window instead of every frame

inside draw function check if in bounds before drawing

convert empty parenthesis to (void)

turn on Wall, get compiling on linux, general testing

? use my own fullscreen instead of sdl so it doesnt minimize when I click away

? change to use sdl_textinputevent? it might be wonky, its a pretty big abstraction

*done* fix camera so if you are below the window you can still move the cursor up, same with left/right
*done* mouse scroll
*done* ctrl key disabled regular key entry because it is used for ctrl commands e.g. ctrl c (USE CLIPBOARD)
*done* move camera on cursor pose
*done* make camera move when selection and going beyond end of screen (so it functions like vscode)
*done* mouse place cursor and selection
*done* home, delete, end
*done* arbitrary number of windows, handle opening and closing and removing renderers to those windows
*done* end process once all windows are closed

@perf
dirty
sort renderers by renderer type
profile to find bottlenecks
optimize osal functions

*/

/*??? future project after writing parser generator and C parser, .otc files that get compiled to .c (c code that is as portable as possible)

write tool to:

templates on structs and functions using 
"@template type
struct 
{
    type varname;
}"
notation (@ sign will be a signal to identify OT preprocessor code)

can mark public on structs (they will be in header file), they are private by default (defined in c file)

generate header files, also copies comments to header file, possibly can also autogenerate documentation

generate getters/setters

prefix all functions in system with system name (or namespaces)

methods on structs, always static (unless doing inheritance also then theres some crazy magic and shit)
can declare method for a struct even when its not defined (takes a pointer and it is defined elsewhere)

move variables declarations to top of scope and initialize them after (if they are initialized),
cast all void*,
other changes to make the code compatible with as many C/C++ compilers as possible

remove necessity to type typedef on structs (add the typdefs)
 
format code

eventually make it a general linter (detect buffer overflows, integer overflows, etc.)

possibly anonymous functions and structs (this would be tricky.. might not be worth it anyway, and then you need auto?)

possibly inheritance

possibly overloading

possibly custom operators
*/
